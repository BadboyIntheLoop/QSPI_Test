ARM GAS  /tmp/ccMjn7vl.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_it.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.NMI_Handler,"ax",%progbits
  17              		.align	1
  18              		.global	NMI_Handler
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	NMI_Handler:
  26              	.LFB144:
  27              		.file 1 "Core/Src/stm32h7xx_it.c"
   1:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32h7xx_it.c **** /**
   3:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32h7xx_it.c ****   * @file    stm32h7xx_it.c
   5:Core/Src/stm32h7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32h7xx_it.c ****   * @attention
   8:Core/Src/stm32h7xx_it.c ****   *
   9:Core/Src/stm32h7xx_it.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/stm32h7xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32h7xx_it.c ****   *
  12:Core/Src/stm32h7xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32h7xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32h7xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32h7xx_it.c ****   *
  16:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32h7xx_it.c ****   */
  18:Core/Src/stm32h7xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32h7xx_it.c **** 
  20:Core/Src/stm32h7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32h7xx_it.c **** #include "main.h"
  22:Core/Src/stm32h7xx_it.c **** #include "stm32h7xx_it.h"
  23:Core/Src/stm32h7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32h7xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32h7xx_it.c **** 
  27:Core/Src/stm32h7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32h7xx_it.c **** 
  30:Core/Src/stm32h7xx_it.c **** /* USER CODE END TD */
  31:Core/Src/stm32h7xx_it.c **** 
ARM GAS  /tmp/ccMjn7vl.s 			page 2


  32:Core/Src/stm32h7xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32h7xx_it.c **** 
  35:Core/Src/stm32h7xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32h7xx_it.c **** 
  37:Core/Src/stm32h7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32h7xx_it.c **** 
  40:Core/Src/stm32h7xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32h7xx_it.c **** 
  42:Core/Src/stm32h7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32h7xx_it.c **** 
  45:Core/Src/stm32h7xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32h7xx_it.c **** 
  47:Core/Src/stm32h7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32h7xx_it.c **** 
  50:Core/Src/stm32h7xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32h7xx_it.c **** 
  52:Core/Src/stm32h7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32h7xx_it.c **** 
  55:Core/Src/stm32h7xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32h7xx_it.c **** 
  57:Core/Src/stm32h7xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32h7xx_it.c **** extern MDMA_HandleTypeDef hmdma_quadspi_fifo_th;
  59:Core/Src/stm32h7xx_it.c **** extern QSPI_HandleTypeDef hqspi;
  60:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN EV */
  61:Core/Src/stm32h7xx_it.c **** 
  62:Core/Src/stm32h7xx_it.c **** /* USER CODE END EV */
  63:Core/Src/stm32h7xx_it.c **** 
  64:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  65:Core/Src/stm32h7xx_it.c **** /*           Cortex Processor Interruption and Exception Handlers          */
  66:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  67:Core/Src/stm32h7xx_it.c **** /**
  68:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  69:Core/Src/stm32h7xx_it.c ****   */
  70:Core/Src/stm32h7xx_it.c **** void NMI_Handler(void)
  71:Core/Src/stm32h7xx_it.c **** {
  28              		.loc 1 71 1 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  72:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  73:Core/Src/stm32h7xx_it.c **** 
  74:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  75:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  76:Core/Src/stm32h7xx_it.c ****    while (1)
  35              		.loc 1 76 4 discriminator 1 view .LVU1
  77:Core/Src/stm32h7xx_it.c ****   {
  78:Core/Src/stm32h7xx_it.c ****   }
  36              		.loc 1 78 3 discriminator 1 view .LVU2
  76:Core/Src/stm32h7xx_it.c ****   {
ARM GAS  /tmp/ccMjn7vl.s 			page 3


  37              		.loc 1 76 10 discriminator 1 view .LVU3
  38 0000 FEE7     		b	.L2
  39              		.cfi_endproc
  40              	.LFE144:
  42              		.section	.text.HardFault_Handler,"ax",%progbits
  43              		.align	1
  44              		.global	HardFault_Handler
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  48              		.fpu fpv5-d16
  50              	HardFault_Handler:
  51              	.LFB145:
  79:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  80:Core/Src/stm32h7xx_it.c **** }
  81:Core/Src/stm32h7xx_it.c **** 
  82:Core/Src/stm32h7xx_it.c **** /**
  83:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  84:Core/Src/stm32h7xx_it.c ****   */
  85:Core/Src/stm32h7xx_it.c **** void HardFault_Handler(void)
  86:Core/Src/stm32h7xx_it.c **** {
  52              		.loc 1 86 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  87:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  88:Core/Src/stm32h7xx_it.c **** 
  89:Core/Src/stm32h7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  90:Core/Src/stm32h7xx_it.c ****   while (1)
  59              		.loc 1 90 3 discriminator 1 view .LVU5
  91:Core/Src/stm32h7xx_it.c ****   {
  92:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  93:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  94:Core/Src/stm32h7xx_it.c ****   }
  60              		.loc 1 94 3 discriminator 1 view .LVU6
  90:Core/Src/stm32h7xx_it.c ****   {
  61              		.loc 1 90 9 discriminator 1 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE145:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu fpv5-d16
  74              	MemManage_Handler:
  75              	.LFB146:
  95:Core/Src/stm32h7xx_it.c **** }
  96:Core/Src/stm32h7xx_it.c **** 
  97:Core/Src/stm32h7xx_it.c **** /**
  98:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Memory management fault.
  99:Core/Src/stm32h7xx_it.c ****   */
ARM GAS  /tmp/ccMjn7vl.s 			page 4


 100:Core/Src/stm32h7xx_it.c **** void MemManage_Handler(void)
 101:Core/Src/stm32h7xx_it.c **** {
  76              		.loc 1 101 1 view -0
  77              		.cfi_startproc
  78              		@ Volatile: function does not return.
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82              	.L6:
 102:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 103:Core/Src/stm32h7xx_it.c **** 
 104:Core/Src/stm32h7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 105:Core/Src/stm32h7xx_it.c ****   while (1)
  83              		.loc 1 105 3 discriminator 1 view .LVU9
 106:Core/Src/stm32h7xx_it.c ****   {
 107:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 108:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 109:Core/Src/stm32h7xx_it.c ****   }
  84              		.loc 1 109 3 discriminator 1 view .LVU10
 105:Core/Src/stm32h7xx_it.c ****   {
  85              		.loc 1 105 9 discriminator 1 view .LVU11
  86 0000 FEE7     		b	.L6
  87              		.cfi_endproc
  88              	.LFE146:
  90              		.section	.text.BusFault_Handler,"ax",%progbits
  91              		.align	1
  92              		.global	BusFault_Handler
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
  96              		.fpu fpv5-d16
  98              	BusFault_Handler:
  99              	.LFB147:
 110:Core/Src/stm32h7xx_it.c **** }
 111:Core/Src/stm32h7xx_it.c **** 
 112:Core/Src/stm32h7xx_it.c **** /**
 113:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 114:Core/Src/stm32h7xx_it.c ****   */
 115:Core/Src/stm32h7xx_it.c **** void BusFault_Handler(void)
 116:Core/Src/stm32h7xx_it.c **** {
 100              		.loc 1 116 1 view -0
 101              		.cfi_startproc
 102              		@ Volatile: function does not return.
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.L8:
 117:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 118:Core/Src/stm32h7xx_it.c **** 
 119:Core/Src/stm32h7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 120:Core/Src/stm32h7xx_it.c ****   while (1)
 107              		.loc 1 120 3 discriminator 1 view .LVU13
 121:Core/Src/stm32h7xx_it.c ****   {
 122:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 123:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 124:Core/Src/stm32h7xx_it.c ****   }
 108              		.loc 1 124 3 discriminator 1 view .LVU14
ARM GAS  /tmp/ccMjn7vl.s 			page 5


 120:Core/Src/stm32h7xx_it.c ****   {
 109              		.loc 1 120 9 discriminator 1 view .LVU15
 110 0000 FEE7     		b	.L8
 111              		.cfi_endproc
 112              	.LFE147:
 114              		.section	.text.UsageFault_Handler,"ax",%progbits
 115              		.align	1
 116              		.global	UsageFault_Handler
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv5-d16
 122              	UsageFault_Handler:
 123              	.LFB148:
 125:Core/Src/stm32h7xx_it.c **** }
 126:Core/Src/stm32h7xx_it.c **** 
 127:Core/Src/stm32h7xx_it.c **** /**
 128:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 129:Core/Src/stm32h7xx_it.c ****   */
 130:Core/Src/stm32h7xx_it.c **** void UsageFault_Handler(void)
 131:Core/Src/stm32h7xx_it.c **** {
 124              		.loc 1 131 1 view -0
 125              		.cfi_startproc
 126              		@ Volatile: function does not return.
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130              	.L10:
 132:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 133:Core/Src/stm32h7xx_it.c **** 
 134:Core/Src/stm32h7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 135:Core/Src/stm32h7xx_it.c ****   while (1)
 131              		.loc 1 135 3 discriminator 1 view .LVU17
 136:Core/Src/stm32h7xx_it.c ****   {
 137:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 138:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 139:Core/Src/stm32h7xx_it.c ****   }
 132              		.loc 1 139 3 discriminator 1 view .LVU18
 135:Core/Src/stm32h7xx_it.c ****   {
 133              		.loc 1 135 9 discriminator 1 view .LVU19
 134 0000 FEE7     		b	.L10
 135              		.cfi_endproc
 136              	.LFE148:
 138              		.section	.text.SVC_Handler,"ax",%progbits
 139              		.align	1
 140              		.global	SVC_Handler
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv5-d16
 146              	SVC_Handler:
 147              	.LFB149:
 140:Core/Src/stm32h7xx_it.c **** }
 141:Core/Src/stm32h7xx_it.c **** 
 142:Core/Src/stm32h7xx_it.c **** /**
 143:Core/Src/stm32h7xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 144:Core/Src/stm32h7xx_it.c ****   */
ARM GAS  /tmp/ccMjn7vl.s 			page 6


 145:Core/Src/stm32h7xx_it.c **** void SVC_Handler(void)
 146:Core/Src/stm32h7xx_it.c **** {
 148              		.loc 1 146 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 147:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 148:Core/Src/stm32h7xx_it.c **** 
 149:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 150:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 151:Core/Src/stm32h7xx_it.c **** 
 152:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 153:Core/Src/stm32h7xx_it.c **** }
 153              		.loc 1 153 1 view .LVU21
 154 0000 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE149:
 158              		.section	.text.DebugMon_Handler,"ax",%progbits
 159              		.align	1
 160              		.global	DebugMon_Handler
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu fpv5-d16
 166              	DebugMon_Handler:
 167              	.LFB150:
 154:Core/Src/stm32h7xx_it.c **** 
 155:Core/Src/stm32h7xx_it.c **** /**
 156:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Debug monitor.
 157:Core/Src/stm32h7xx_it.c ****   */
 158:Core/Src/stm32h7xx_it.c **** void DebugMon_Handler(void)
 159:Core/Src/stm32h7xx_it.c **** {
 168              		.loc 1 159 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 160:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 161:Core/Src/stm32h7xx_it.c **** 
 162:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 163:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 164:Core/Src/stm32h7xx_it.c **** 
 165:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 166:Core/Src/stm32h7xx_it.c **** }
 173              		.loc 1 166 1 view .LVU23
 174 0000 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE150:
 178              		.section	.text.PendSV_Handler,"ax",%progbits
 179              		.align	1
 180              		.global	PendSV_Handler
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv5-d16
 186              	PendSV_Handler:
ARM GAS  /tmp/ccMjn7vl.s 			page 7


 187              	.LFB151:
 167:Core/Src/stm32h7xx_it.c **** 
 168:Core/Src/stm32h7xx_it.c **** /**
 169:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Pendable request for system service.
 170:Core/Src/stm32h7xx_it.c ****   */
 171:Core/Src/stm32h7xx_it.c **** void PendSV_Handler(void)
 172:Core/Src/stm32h7xx_it.c **** {
 188              		.loc 1 172 1 view -0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 173:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 174:Core/Src/stm32h7xx_it.c **** 
 175:Core/Src/stm32h7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 176:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 177:Core/Src/stm32h7xx_it.c **** 
 178:Core/Src/stm32h7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 179:Core/Src/stm32h7xx_it.c **** }
 193              		.loc 1 179 1 view .LVU25
 194 0000 7047     		bx	lr
 195              		.cfi_endproc
 196              	.LFE151:
 198              		.section	.text.SysTick_Handler,"ax",%progbits
 199              		.align	1
 200              		.global	SysTick_Handler
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv5-d16
 206              	SysTick_Handler:
 207              	.LFB152:
 180:Core/Src/stm32h7xx_it.c **** 
 181:Core/Src/stm32h7xx_it.c **** /**
 182:Core/Src/stm32h7xx_it.c ****   * @brief This function handles System tick timer.
 183:Core/Src/stm32h7xx_it.c ****   */
 184:Core/Src/stm32h7xx_it.c **** void SysTick_Handler(void)
 185:Core/Src/stm32h7xx_it.c **** {
 208              		.loc 1 185 1 view -0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212 0000 08B5     		push	{r3, lr}
 213              	.LCFI0:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 3, -8
 216              		.cfi_offset 14, -4
 186:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 187:Core/Src/stm32h7xx_it.c **** 
 188:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 189:Core/Src/stm32h7xx_it.c ****   HAL_IncTick();
 217              		.loc 1 189 3 view .LVU27
 218 0002 FFF7FEFF 		bl	HAL_IncTick
 219              	.LVL0:
 190:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 191:Core/Src/stm32h7xx_it.c **** 
 192:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
ARM GAS  /tmp/ccMjn7vl.s 			page 8


 193:Core/Src/stm32h7xx_it.c **** }
 220              		.loc 1 193 1 is_stmt 0 view .LVU28
 221 0006 08BD     		pop	{r3, pc}
 222              		.cfi_endproc
 223              	.LFE152:
 225              		.section	.text.QUADSPI_IRQHandler,"ax",%progbits
 226              		.align	1
 227              		.global	QUADSPI_IRQHandler
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu fpv5-d16
 233              	QUADSPI_IRQHandler:
 234              	.LFB153:
 194:Core/Src/stm32h7xx_it.c **** 
 195:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 196:Core/Src/stm32h7xx_it.c **** /* STM32H7xx Peripheral Interrupt Handlers                                    */
 197:Core/Src/stm32h7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 198:Core/Src/stm32h7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 199:Core/Src/stm32h7xx_it.c **** /* please refer to the startup file (startup_stm32h7xx.s).                    */
 200:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 201:Core/Src/stm32h7xx_it.c **** 
 202:Core/Src/stm32h7xx_it.c **** /**
 203:Core/Src/stm32h7xx_it.c ****   * @brief This function handles QUADSPI global interrupt.
 204:Core/Src/stm32h7xx_it.c ****   */
 205:Core/Src/stm32h7xx_it.c **** void QUADSPI_IRQHandler(void)
 206:Core/Src/stm32h7xx_it.c **** {
 235              		.loc 1 206 1 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239 0000 08B5     		push	{r3, lr}
 240              	.LCFI1:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 3, -8
 243              		.cfi_offset 14, -4
 207:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN QUADSPI_IRQn 0 */
 208:Core/Src/stm32h7xx_it.c **** 
 209:Core/Src/stm32h7xx_it.c ****   /* USER CODE END QUADSPI_IRQn 0 */
 210:Core/Src/stm32h7xx_it.c ****   HAL_QSPI_IRQHandler(&hqspi);
 244              		.loc 1 210 3 view .LVU30
 245 0002 0248     		ldr	r0, .L18
 246 0004 FFF7FEFF 		bl	HAL_QSPI_IRQHandler
 247              	.LVL1:
 211:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN QUADSPI_IRQn 1 */
 212:Core/Src/stm32h7xx_it.c **** 
 213:Core/Src/stm32h7xx_it.c ****   /* USER CODE END QUADSPI_IRQn 1 */
 214:Core/Src/stm32h7xx_it.c **** }
 248              		.loc 1 214 1 is_stmt 0 view .LVU31
 249 0008 08BD     		pop	{r3, pc}
 250              	.L19:
 251 000a 00BF     		.align	2
 252              	.L18:
 253 000c 00000000 		.word	hqspi
 254              		.cfi_endproc
 255              	.LFE153:
 257              		.section	.text.MDMA_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccMjn7vl.s 			page 9


 258              		.align	1
 259              		.global	MDMA_IRQHandler
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu fpv5-d16
 265              	MDMA_IRQHandler:
 266              	.LFB154:
 215:Core/Src/stm32h7xx_it.c **** 
 216:Core/Src/stm32h7xx_it.c **** /**
 217:Core/Src/stm32h7xx_it.c ****   * @brief This function handles MDMA global interrupt.
 218:Core/Src/stm32h7xx_it.c ****   */
 219:Core/Src/stm32h7xx_it.c **** void MDMA_IRQHandler(void)
 220:Core/Src/stm32h7xx_it.c **** {
 267              		.loc 1 220 1 is_stmt 1 view -0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271 0000 08B5     		push	{r3, lr}
 272              	.LCFI2:
 273              		.cfi_def_cfa_offset 8
 274              		.cfi_offset 3, -8
 275              		.cfi_offset 14, -4
 221:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN MDMA_IRQn 0 */
 222:Core/Src/stm32h7xx_it.c **** 
 223:Core/Src/stm32h7xx_it.c ****   /* USER CODE END MDMA_IRQn 0 */
 224:Core/Src/stm32h7xx_it.c ****   HAL_MDMA_IRQHandler(&hmdma_quadspi_fifo_th);
 276              		.loc 1 224 3 view .LVU33
 277 0002 0248     		ldr	r0, .L22
 278 0004 FFF7FEFF 		bl	HAL_MDMA_IRQHandler
 279              	.LVL2:
 225:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN MDMA_IRQn 1 */
 226:Core/Src/stm32h7xx_it.c **** 
 227:Core/Src/stm32h7xx_it.c ****   /* USER CODE END MDMA_IRQn 1 */
 228:Core/Src/stm32h7xx_it.c **** }
 280              		.loc 1 228 1 is_stmt 0 view .LVU34
 281 0008 08BD     		pop	{r3, pc}
 282              	.L23:
 283 000a 00BF     		.align	2
 284              	.L22:
 285 000c 00000000 		.word	hmdma_quadspi_fifo_th
 286              		.cfi_endproc
 287              	.LFE154:
 289              		.text
 290              	.Letext0:
 291              		.file 2 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h"
 292              		.file 3 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/_stdint.h"
 293              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 294              		.file 5 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 295              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h753xx.h"
 296              		.file 7 "/opt/gcc-arm-none-eabi-9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h"
 297              		.file 8 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/_types.h"
 298              		.file 9 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/reent.h"
 299              		.file 10 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/lock.h"
 300              		.file 11 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/math.h"
 301              		.file 12 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 302              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
ARM GAS  /tmp/ccMjn7vl.s 			page 10


 303              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 304              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
 305              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/ccMjn7vl.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_it.c
     /tmp/ccMjn7vl.s:17     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccMjn7vl.s:43     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccMjn7vl.s:67     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:74     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccMjn7vl.s:91     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:98     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccMjn7vl.s:115    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:122    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccMjn7vl.s:139    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:146    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccMjn7vl.s:159    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:166    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccMjn7vl.s:179    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:186    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccMjn7vl.s:199    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccMjn7vl.s:206    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccMjn7vl.s:226    .text.QUADSPI_IRQHandler:0000000000000000 $t
     /tmp/ccMjn7vl.s:233    .text.QUADSPI_IRQHandler:0000000000000000 QUADSPI_IRQHandler
     /tmp/ccMjn7vl.s:253    .text.QUADSPI_IRQHandler:000000000000000c $d
     /tmp/ccMjn7vl.s:258    .text.MDMA_IRQHandler:0000000000000000 $t
     /tmp/ccMjn7vl.s:265    .text.MDMA_IRQHandler:0000000000000000 MDMA_IRQHandler
     /tmp/ccMjn7vl.s:285    .text.MDMA_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_QSPI_IRQHandler
hqspi
HAL_MDMA_IRQHandler
hmdma_quadspi_fifo_th
